#  Copyright 2019 MongoDB Inc.
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
import os
import webbrowser

import requests

from invoke import task

from serverworkflowtool import config
from serverworkflowtool.templates import evergreen_yaml_template
from serverworkflowtool.utils import get_logger, instruction, log_func


def evergreen_yaml(conf):
    # initialize Jira to get the jira user name for Evergreen.
    if config.EVG_CONFIG_FILE.exists():
        get_logger().info(
            'Found existing ~/.evergreen.yml, skipping adding Evergreen configuration')
        get_logger().info(
            'Please ensure your ~/.evergreen.yml was generated by this tool. If not, '
            'make sure you know what\'s in there')
    else:
        settings_url = 'https://evergreen.mongodb.com/login/key'
        while True:
            res = requests.post(settings_url, json={'username': conf.username, 'password': conf.jira_pwd})
            if res.status_code != 200:
                get_logger().error('Failed to fetch API key from evergreen. Error: %s', str(res))
                input(instruction('Press any key to retry...'))
                continue
            res_json = res.json()

            evg_config = evergreen_yaml_template.format(res_json['user'], res_json['api_key'])

            with open(config.EVG_CONFIG_FILE, 'w') as fh:
                fh.write(evg_config)
            break


def ssh_keys(ctx):
    if config.SSH_KEY_FILE.is_file():
        get_logger().info('Found existing key ~/.ssh/id_rsa, skipping setting up ssh keys')
        get_logger().info('Please ensure your keys are added to your GitHub account')
        return

    res = input(instruction('Opening browser for instructions to setting up ssh keys in GitHub, '
                            'press any key to continue, enter "skip" to skip: '))
    if res != 'skip':
        webbrowser.open(config.GITHUB_SSH_HELP_URL)
        input(
            'Once you\'ve generated SSH keys and added them to GitHub, press any key to continue')
    else:
        get_logger().info('Skipping adding SSH Keys to GitHub')

    while not (config.SSH_KEY_FILE.is_file()):
        get_logger().error(
            str(config.SSH_KEY_FILE) + ' is not a file, please double check you have completed '
                                       'GitHub\'s guide on setting up SSH keys')


def clone_repos(ctx, conf):
    repo_parent_dir = config.HOME / 'mongodb'
    repo_parent_dir.mkdir(exist_ok=True)
    get_logger().info('Placing MongoDB Git repositories in %s', repo_parent_dir)

    # for


@task
def macos(ctx):
    conf = config.Config()

    # Create ssh keys and add them to GitHub.
    # Do this first as it can't be automated.
    log_func(lambda: ssh_keys(ctx), 'Configure SSH Keys')

    log_func(lambda: evergreen_yaml(conf), 'Configure Evergeen')

    log_func(lambda: clone_repos(ctx, conf), 'Clone MongoDB Repositories')
